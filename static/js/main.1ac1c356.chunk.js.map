{"version":3,"sources":["component/pagination/Pagination.js","component/PostFiltersForm/PostFiltersForm.js","component/Clock.js","component/SonTra/SonTra.js","component/SonTra/DataSonTra.js","App.js","reportWebVitals.js","index.js"],"names":["Pagination","props","pagination","onPageChange","_page","_limit","_totalRows","totalPage","Math","ceil","handleClick","newPage","disabled","onClick","defaultProps","PostFiltersForm","onSubmit","useState","value","setValue","typingTimoutRef","useRef","type","onChange","e","newValue","target","current","clearTimeout","setTimeout","Clock","SonTra","dataName","dataText","setData","useEffect","ResponsiveContainer","width","height","AreaChart","data","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","dataKey","stroke","fill","XAxis","axisLine","tickLine","YAxis","vertical","tickCount","Tooltip","Legend","CartesianGrid","opacity","resultstemp","yearNumber","filter","textDa","Number","year","reduce","i","map","k","month","includes","item","find","obj","listTotal","totalNum","temp","valueTotal","length","y","v","resultsSalinity","salinity","arrayDataDayTemp","textDataContent","totalMedium","textString","toString","split","textStringCopy","splice","total","totalNumber","day","arrayDataDaySalinity","DataSonTra","text","setText","showFileT","a","reader","FileReader","onload","result","undefined","textDataString","console","log","data2005","data2006","data2007","readAsText","files","showFileS","preventDefault","dataS","x","abc","q","t","s","density","style","textAlign","color","fontSize","paddingRight","className","yearN","App","setPostsList","_totalRow","setPagination","title_like","fil","paramsString","queryString","stringify","url","fetch","reponse","json","reponseJSON","fetchPosts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ac1c356.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nPagination.propTypes = {\r\n    pagination: PropTypes.object.isRequired,\r\n    onPageChange: PropTypes.func\r\n};\r\nPagination.defaultProps = {\r\n    onPageChange: null\r\n}\r\nfunction Pagination(props) {\r\n    const { pagination, onPageChange } = props;\r\n    const {_page, _limit, _totalRows} = pagination;\r\n    const totalPage = Math.ceil(_totalRows / _limit);\r\n    const handleClick =  (newPage) => {\r\n        if(onPageChange) {\r\n            onPageChange(newPage)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <button \r\n                disabled={_page <= 1}\r\n                onClick={() => handleClick(_page - 1)}\r\n            >\r\n                Prev\r\n            </button>\r\n            <button \r\n                disabled={_page >= totalPage}\r\n                onClick={() => handleClick(_page + 1)}\r\n            >\r\n                Next\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React, { useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nPostFiltersForm.propTypes = {\r\n    onSubmit: PropTypes.func\r\n};\r\nPostFiltersForm.defaultProps = {\r\n    onSubmit: null\r\n}\r\n\r\nfunction PostFiltersForm(props) {\r\n    const { onSubmit } = props\r\n    const [value, setValue] = useState('')\r\n    const typingTimoutRef = useRef(null)\r\n    const handleChange = (e) => {\r\n        const newValue = e.target.value;\r\n        setValue(newValue)\r\n\r\n        if(!onSubmit) return;\r\n\r\n        if(typingTimoutRef.current) {\r\n            clearTimeout(typingTimoutRef.current)\r\n        }\r\n        typingTimoutRef.current = setTimeout(() => {\r\n            const formValue = {\r\n                value: newValue,\r\n            }\r\n            onSubmit(formValue)\r\n        }, 500);\r\n    }\r\n    return (\r\n        <form>\r\n            <input \r\n            type=\"text\"\r\n            onChange={handleChange}\r\n            value={value}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default PostFiltersForm;","import React, { useEffect, useState } from 'react';\r\n\r\nconst formDate = (date) => {\r\n    let h = `0${date.getHours()}`.slice(-2);\r\n    let m = `0${date.getMinutes()}`.slice(-2);\r\n    let s = `0${date.getSeconds()}`.slice(-2);\r\n    let session = 'am'\r\n\r\n    if( Number(h) === 0) {\r\n        h = '12'\r\n    }\r\n    if( Number(h) > 12) {\r\n        let newh = Number(h) - 12\r\n        h = `${newh}`\r\n        session = 'pm'\r\n    }\r\n    return `${h}:${m}:${s} ${session} `\r\n}\r\nfunction Clock() {\r\n    const [time, setTime] = useState('')\r\n    useEffect(() => {\r\n        const clockInterval = setInterval(() => {\r\n            const newTime = new Date()\r\n            const newTimeString = formDate(newTime)\r\n            setTime(newTimeString)\r\n        }, 1000);\r\n        return () => clearInterval(clockInterval)\r\n    }, [])\r\n    return (\r\n        <p style={{fontSize: '42px', color: 'red'}}>{time}</p>\r\n    );\r\n}\r\n\r\nexport default Clock;","import React, { PureComponent, useEffect, useState } from 'react';\r\n\r\nimport {\r\n  ResponsiveContainer,\r\n  AreaChart,\r\n  XAxis,\r\n  YAxis,\r\n  Area,\r\n  Tooltip,\r\n  CartesianGrid,\r\n  LineChart,\r\n  Line,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\n\r\n\r\nconst SonTra = props => {\r\n    const {dataName} = props\r\n    const [dataText, setData] = useState(dataName)\r\n    useEffect(() => {\r\n        setData(dataName)\r\n    }, [dataName])\r\n    // console.log(dataText)\r\n    return (\r\n        <ResponsiveContainer width=\"100%\" height={400} key={dataText}>\r\n        <AreaChart data={dataText}>\r\n          <defs>\r\n            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n              <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.4} />\r\n              <stop offset=\"75%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n            </linearGradient>\r\n          </defs>\r\n\r\n          <Area type=\"monotone\" dataKey=\"temp\" stroke=\"#ff4e4e\" fill=\"url(#color)\" />\r\n          <Area type=\"monotone\" dataKey=\"salinity\" stroke=\"#df731b\"  fill=\"url(#color)\" />\r\n          <Area type=\"monotone\" dataKey=\"density\" stroke=\"#5f64f9\"  fill=\"url(#color)\" />\r\n\r\n          <XAxis\r\n            dataKey=\"month\"\r\n            axisLine={false}\r\n            tickLine={false}\r\n          />\r\n\r\n          <YAxis\r\n            axisLine={false}\r\n            tickLine={false}\r\n            vertical={true}\r\n            tickCount={8}\r\n          />\r\n\r\n          <Tooltip />\r\n          <Legend/>\r\n          <CartesianGrid opacity={0.2} vertical={true} />\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    );\r\n}\r\n\r\nexport default SonTra;","import React, { useState } from 'react';\r\n\r\n\r\nimport SonTra from './SonTra';\r\n\r\nconst resultstemp = (props ,yearNumber) => {\r\n    const textDataYear = props.filter(textDa =>{\r\n                return Number(textDa.year) === yearNumber\r\n    })\r\n    const textDataMonth = textDataYear.reduce((value, i) => {\r\n        if (value.map(k => k.month).includes(i.month)) {\r\n            let item = value.find(obj => obj.month === i.month)\r\n            item.listTotal = [...item.listTotal, {totalNum: i.temp}]\r\n            return value\r\n        }\r\n        return [...value, {month: i.month, listTotal: [{totalNum: i.temp}]}]\r\n    }, [])\r\n    const totalMedium = textDataMonth.map((value, i) =>{\r\n        const valueTotal = value.listTotal.length\r\n        const x = value.listTotal.reduce((v, item) => {\r\n            return (v+ Number(item.totalNum))\r\n        }, 0)\r\n        const y = x  / valueTotal\r\n        return {\r\n            month: value.month,\r\n            temp: y,\r\n        }\r\n    })\r\n    return totalMedium\r\n}\r\n\r\n\r\nconst resultsSalinity = (props ,yearNumber) => {\r\n    const textDataYear = props.filter(textDa =>{\r\n                return Number(textDa.year) === yearNumber\r\n    })\r\n    const textDataMonth = textDataYear.reduce((value, i) => {\r\n        if (value.map(k => k.month).includes(i.month)) {\r\n            let item = value.find(obj => obj.month === i.month)\r\n            // item.listDay = [...item.listDay, {day: i.day}]\r\n            item.listTotal = [...item.listTotal, {totalNum: i.salinity}]\r\n            return value\r\n        }\r\n        return [...value, {month: i.month, listTotal: [{totalNum: i.salinity}]}]\r\n    }, [])\r\n    const totalMedium = textDataMonth.map((value, i) =>{\r\n        // console.log(value.listTotal)\r\n        const valueTotal = value.listTotal.length\r\n        const x = value.listTotal.reduce((v, item) => {\r\n            return (v+ Number(item.totalNum))\r\n        }, 0)\r\n        const y = x  / valueTotal\r\n        return {\r\n            month: value.month,\r\n            salinity: y,\r\n        }\r\n    })\r\n    return totalMedium\r\n}\r\n\r\nconst arrayDataDayTemp = (textDataContent, totalMedium) => {\r\n    const x = textDataContent.map(textDa => {\r\n                const textString = textDa.toString().split(' ')\r\n                const  textStringCopy = [...textString].splice(3)\r\n                const total = textStringCopy.reduce((total, totalNumber) => {\r\n                    return (total + Number(totalNumber)) \r\n                }, 0)\r\n                const y = total / textStringCopy.length\r\n                return {\r\n                    year: textString[0],\r\n                    month: textString[1],\r\n                    day: textString[2],\r\n                    temp: y\r\n                }\r\n    })\r\n    return x\r\n}\r\nconst arrayDataDaySalinity = (textDataContent, totalMedium) => {\r\n    const x = textDataContent.map(textDa => {\r\n                const textString = textDa.toString().split(' ')\r\n                const  textStringCopy = [...textString].splice(3)\r\n                const total = textStringCopy.reduce((total, totalNumber) => {\r\n                    return (total + Number(totalNumber)) \r\n                }, 0)\r\n                const y = total / textStringCopy.length\r\n                return {\r\n                    year: textString[0],\r\n                    month: textString[1],\r\n                    day: textString[2],\r\n                    salinity: y\r\n                }\r\n    })\r\n    return x\r\n}\r\n\r\nfunction DataSonTra(props) {\r\n    const [text, setText] = useState([]);\r\n    const [year, setYear] = useState([2005, 2006, 2007]);\r\n\r\n    const showFileT = async (e) => {\r\n        // e.preventDefault()\r\n        const reader = new FileReader()\r\n        reader.onload = async (e) => { \r\n            const textDataContent = (e.target.result).split('\\r\\n')\r\n            // console.log(textDataContent.splice())\r\n            if (text === undefined) return;\r\n            const textData = textDataContent.splice(0,1)\r\n            const textDataString = arrayDataDayTemp(textDataContent)\r\n            console.log(textDataString.map(i => {\r\n                return i.year\r\n            }))\r\n            const data2005 = resultstemp(textDataString, 2005)\r\n            const data2006 = resultstemp(textDataString, 2006)\r\n            const data2007 = resultstemp(textDataString, 2007)\r\n            const dataT = [data2005, data2006, data2007]\r\n            setText(dataT)       \r\n        };\r\n        reader.readAsText(e.target.files[0])\r\n    }\r\n    const showFileS = async (e) => {\r\n        e.preventDefault()\r\n        const reader = new FileReader()\r\n        reader.onload = async (e) => { \r\n            const textDataContent = (e.target.result).split('\\r\\n')\r\n            if (text === undefined) return;\r\n            const textData = textDataContent.splice(0,1)\r\n            const textDataString = arrayDataDaySalinity(textDataContent)\r\n            \r\n            const data2005 = resultsSalinity(textDataString, 2005)\r\n            const data2006 = resultsSalinity(textDataString, 2006)\r\n            const data2007 = resultsSalinity(textDataString, 2007)\r\n            const dataS = [{year:  data2005 },{year: data2006}, {year: data2007}]\r\n            const data = text.map((v, i) => {\r\n                const dataSalinity = dataS[i].year\r\n                const x = dataSalinity.map(v => {\r\n                    return {salinity: v.salinity}\r\n                })\r\n                const abc = v.map((q, i) => {\r\n                    const y = x[i]\r\n                    const t = q.temp\r\n                    const s = x[i].salinity\r\n                    const pw = 999.842594 + 6.793952 * (10 ** -2)*t - 9.095290 * (10 ** -3)*(t ** 2) + 1.001685 * (10 ** -4) * (t ** 3) - 1.120083 * (10 ** -6) * (t**4) + 6.536332 * (10 ** -9) * (t ** 5)\r\n                    const a = (8.24493 * (10 ** -1) - 4.0899 * (10 ** -3) * t + 7.6438 * (10 ** -5)*(t ** 2) - 8.2467 * (10 ** -7)*(t ** 3) + 5.3875*(10 ** -9) * (t ** 4)) * s\r\n                    const b = (- 5.72466 * (10 ** -3) + 1.0227 * (10 ** -4)* t - 1.6546 * (10 ** -6)*(t ** 2))*(s ** (3/2))\r\n                    const density = (pw + a + b + 4.8314*(10 ** -4)*(s ** 2)) / 100\r\n                    // console.log(d)\r\n                    return {...q, ...x[i], density}\r\n                })\r\n                return abc\r\n            })\r\n            setText(data)         \r\n        };\r\n        reader.readAsText(e.target.files[0])\r\n    }\r\n    console.log(text)\r\n    return (\r\n        <div> \r\n            <div style={{textAlign: 'center'}}>\r\n                <span style={{color: '#d9d7d7', fontSize: '20px', paddingRight: '12px'}}>Nhập file .txt thể hiện T tại đây</span>\r\n                <input type=\"file\" className=\"form-control-T\" id='form-control-T' onChange={(e) => showFileT(e)} />\r\n            </div>\r\n            <div style={{textAlign: 'center'}}>\r\n                <span style={{color: '#d9d7d7', fontSize: '20px', paddingRight: '12px'}}>Nhập file .txt thể hiện S tại đây</span>\r\n                <input type=\"file\" className=\"form-control-S\" id='form-control-S' onChange={(e) => showFileS(e)} />\r\n            </div>\r\n            {text.map(( v, i ) => {\r\n                const yearN = year[i]\r\n                return (\r\n                    <div className=\"chart\">\r\n                        <p className='chart-year'>{yearN}</p>\r\n                        <SonTra dataName={v}/>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataSonTra;","import React, { useEffect, useState } from 'react';\nimport TodoList from './component/TodoList';\nimport Pagination from './component/pagination/Pagination';\nimport queryString from 'query-string'\nimport PostFiltersForm from './component/PostFiltersForm/PostFiltersForm';\nimport Clock from './component/Clock';\nimport DataSonTra from './component/SonTra/DataSonTra';\nimport './style/SonTra.css'\nimport './style/global.css'\n\n\n\nfunction App(props) {\n  const [postsList, setPostsList] = useState([])\n  const [pagination, setPagination] = useState({\n    _page: 1,\n    _limit: 10,\n    _totalRow: 1,\n  })\n  const [fil, setFil] = useState({\n    _page: 1,\n    _limit: 10,\n    title_like: ''\n  }) \n\n  useEffect(() => {\n    async function fetchPosts () {\n      try {\n        const paramsString = queryString.stringify(fil)\n        // _limit=10&_page=1\n        const url = `http://js-post-api.herokuapp.com/api/posts?${paramsString}`\n        const reponse = await fetch(url)\n        const reponseJSON = await reponse.json()\n        const {data , pagination} = reponseJSON\n        setPostsList(data)\n        setPagination(pagination)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    fetchPosts()\n  }, [fil])\n\n  const handlePageChange = (newPage) => {\n    setFil({\n      ...fil,\n      _page: newPage\n    })\n  }\n  function handleFormSubmit (formValue) {\n    setFil({\n      ...fil,\n      _page: 1,\n      title_like: formValue.value\n    })\n  }\n  return (\n    <div>\n        {/* <PostFiltersForm  onSubmit={handleFormSubmit}/> */}\n        {/* <TodoList posts={postsList} /> */}\n        {/* <Pagination pagination={pagination} onPageChange={handlePageChange}/> */}\n        {/* <Clock /> */}\n        <DataSonTra />\n      </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}